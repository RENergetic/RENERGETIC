
upstream wso {
    server wso-sv:8280;
}

upstream keycloak {
    server keycloak-sv:8080;
}

map $http_apikey $key {
    default   $http_apikey;
    ""        "eyJ4NXQiOiJOMkpqTWpOaU0yRXhZalJrTnpaalptWTFZVEF4Tm1GbE5qZzRPV1UxWVdRMll6YzFObVk1TlE9PSIsImtpZCI6ImdhdGV3YXlfY2VydGlmaWNhdGVfYWxpYXMiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbkBjYXJib24uc3VwZXIiLCJhcHBsaWNhdGlvbiI6eyJvd25lciI6ImFkbWluIiwidGllclF1b3RhVHlwZSI6bnVsbCwidGllciI6IlVubGltaXRlZCIsIm5hbWUiOiJSZW5lcmdldGljIiwiaWQiOjIsInV1aWQiOiI4MWRlY2U0Ni0zOTM3LTQ3ODQtOTg2YS02NWY1OGVjYzg4ZGUifSwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo5NDQzXC9vYXV0aDJcL3Rva2VuIiwidGllckluZm8iOnsiVW5saW1pdGVkIjp7InRpZXJRdW90YVR5cGUiOiJyZXF1ZXN0Q291bnQiLCJncmFwaFFMTWF4Q29tcGxleGl0eSI6MCwiZ3JhcGhRTE1heERlcHRoIjowLCJzdG9wT25RdW90YVJlYWNoIjp0cnVlLCJzcGlrZUFycmVzdExpbWl0IjowLCJzcGlrZUFycmVzdFVuaXQiOm51bGx9fSwia2V5dHlwZSI6IlNBTkRCT1giLCJwZXJtaXR0ZWRSZWZlcmVyIjoiIiwic3Vic2NyaWJlZEFQSXMiOlt7InN1YnNjcmliZXJUZW5hbnREb21haW4iOiJjYXJib24uc3VwZXIiLCJuYW1lIjoiUG9zdGdyZVNRTC1BUEkiLCJjb250ZXh0IjoiXC9hcGktcG9zdGdyZVwvMS4wIiwicHVibGlzaGVyIjoiYWRtaW4iLCJ2ZXJzaW9uIjoiMS4wIiwic3Vic2NyaXB0aW9uVGllciI6IlVubGltaXRlZCJ9LHsic3Vic2NyaWJlclRlbmFudERvbWFpbiI6ImNhcmJvbi5zdXBlciIsIm5hbWUiOiJNZWFzdXJlbWVudC1BUEkiLCJjb250ZXh0IjoiXC9hcGktbWVhc3VyZW1lbnRcLzEuMCIsInB1Ymxpc2hlciI6ImFkbWluIiwidmVyc2lvbiI6IjEuMCIsInN1YnNjcmlwdGlvblRpZXIiOiJVbmxpbWl0ZWQifV0sInRva2VuX3R5cGUiOiJhcGlLZXkiLCJwZXJtaXR0ZWRJUCI6IiIsImlhdCI6MTY3MTUzMTg4NiwianRpIjoiNDkwNWFiMDEtNDJkNi00ZTgzLTk3ZmEtZDRhOWIxZDJiZTI4In0=.SyhGrUPBg9yRv01LlhUg8togf-RNCuNHd6SmByLTOOzFSUDWMJYZczJF3y5TkzsL8zb0ScHF_C82zUG7nDH6llEIJDOncB8RCtgCG7eZ6vNDJ6XLi6c-nHs3jbpRW2LQG118zvUVbjtlmZ6VRebL8ftQthO3RgM5wNDCwocnj2Azb6bxK7OyECJGIwOP46aLWzRf67UXVmUFGjsaNtSlecC0gX6u-YzuWkKWuBkqOKcLsfjKCcWmgggchnIsp_bNdWthe-oRvaFaz7Tsf94IfHUvtwOqYwZ5z0N1MuFGncExHEu_gslvXO2UdK9f1Hrz6PNHW0Vg5sDE8nJYSDy4uA==";
}

server {
    listen       8080;
    listen  [::]:8080;
    server_name  localhost;

    proxy_set_header X-Forwarded-For $proxy_protocol_addr; # To forward the original client's IP address 
    proxy_set_header X-Forwarded-Proto $scheme; # to forward the  original protocol (HTTP or HTTPS)
    proxy_set_header X-Forwarded-Host $host; # to forward the original host requested by the client
    
    #access_log  /var/log/nginx/host.access.log  main;

    location ^~ /api- {
        proxy_set_header apikey $key;

        proxy_pass http://wso;
    }

    location ^~ /auth {
        proxy_pass http://keycloak;
    }

    location ^~ / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html?uri=$uri;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}