/*
 * This file is generated by jOOQ.
 */
package com.renergetic.backdb.model.test.tables;


import com.renergetic.backdb.model.test.Indexes;
import com.renergetic.backdb.model.test.Public;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSettings extends TableImpl<Record> {

    private static final long serialVersionUID = 1582345997;

    /**
     * The reference instance of <code>public.user_settings</code>
     */
    public static final UserSettings USER_SETTINGS = new UserSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.user_settings.id</code>.
     */
    public static final TableField<Record, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), USER_SETTINGS, "");

    /**
     * The column <code>public.user_settings.settings_json</code>.
     */
    public static final TableField<Record, String> SETTINGS_JSON = createField(DSL.name("settings_json"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), USER_SETTINGS, "");

    /**
     * The column <code>public.user_settings.user_id</code>.
     */
    public static final TableField<Record, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), USER_SETTINGS, "");

    /**
     * No further instances allowed
     */
    private UserSettings() {
        this(DSL.name("user_settings"), null);
    }

    private UserSettings(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private UserSettings(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_SETTINGS_PKEY);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(com.renergetic.backdb.model.test.tables.UserSettings.USER_SETTINGS, "user_settings_pkey", com.renergetic.backdb.model.test.tables.UserSettings.ID);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(com.renergetic.backdb.model.test.tables.UserSettings.USER_SETTINGS, "user_settings_pkey", com.renergetic.backdb.model.test.tables.UserSettings.ID)
        );
    }
}
