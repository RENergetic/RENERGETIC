/*
 * This file is generated by jOOQ.
 */
package com.renergetic.backdb.model.test.tables;


import com.renergetic.backdb.model.test.Public;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetMeasurement extends TableImpl<Record> {

    private static final long serialVersionUID = 1031252064;

    /**
     * The reference instance of <code>public.asset_measurement</code>
     */
    public static final AssetMeasurement ASSET_MEASUREMENT = new AssetMeasurement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.asset_measurement.measurement_id</code>.
     */
    public static final TableField<Record, Long> MEASUREMENT_ID = createField(DSL.name("measurement_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), ASSET_MEASUREMENT, "");

    /**
     * The column <code>public.asset_measurement.asset_id</code>.
     */
    public static final TableField<Record, Long> ASSET_ID = createField(DSL.name("asset_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), ASSET_MEASUREMENT, "");

    /**
     * No further instances allowed
     */
    private AssetMeasurement() {
        this(DSL.name("asset_measurement"), null);
    }

    private AssetMeasurement(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private AssetMeasurement(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }
}
