/*
 * This file is generated by jOOQ.
 */
package com.renergetic.backdb.model.test.tables;


import com.renergetic.backdb.model.test.Indexes;
import com.renergetic.backdb.model.test.Public;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Area extends TableImpl<Record> {

    private static final long serialVersionUID = -1513924877;

    /**
     * The reference instance of <code>public.area</code>
     */
    public static final Area AREA = new Area();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.area.id</code>.
     */
    public static final TableField<Record, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), AREA, "");

    /**
     * The column <code>public.area.label</code>.
     */
    public static final TableField<Record, String> LABEL = createField(DSL.name("label"), org.jooq.impl.SQLDataType.VARCHAR(255), AREA, "");

    /**
     * The column <code>public.area.name</code>.
     */
    public static final TableField<Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), AREA, "");

    /**
     * The column <code>public.area.asset_id</code>.
     */
    public static final TableField<Record, Long> ASSET_ID = createField(DSL.name("asset_id"), org.jooq.impl.SQLDataType.BIGINT, AREA, "");

    /**
     * The column <code>public.area.child_heatmap_id</code>.
     */
    public static final TableField<Record, Long> CHILD_HEATMAP_ID = createField(DSL.name("child_heatmap_id"), org.jooq.impl.SQLDataType.BIGINT, AREA, "");

    /**
     * The column <code>public.area.dashboard_id</code>.
     */
    public static final TableField<Record, Long> DASHBOARD_ID = createField(DSL.name("dashboard_id"), org.jooq.impl.SQLDataType.BIGINT, AREA, "");

    /**
     * The column <code>public.area.parent_heatmap_id</code>.
     */
    public static final TableField<Record, Long> PARENT_HEATMAP_ID = createField(DSL.name("parent_heatmap_id"), org.jooq.impl.SQLDataType.BIGINT, AREA, "");

    /**
     * No further instances allowed
     */
    private Area() {
        this(DSL.name("area"), null);
    }

    private Area(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Area(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AREA_PKEY);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(com.renergetic.backdb.model.test.tables.Area.AREA, "area_pkey", com.renergetic.backdb.model.test.tables.Area.ID);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(com.renergetic.backdb.model.test.tables.Area.AREA, "area_pkey", com.renergetic.backdb.model.test.tables.Area.ID)
        );
    }
}
